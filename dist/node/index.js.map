{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n* siglr\n* 3.0.7\n*\n* \n* https://github.com/720kb/signaler\n*\n* MIT license\n* Sun Mar 06 2016\n*/\n/*global module,require,console*/\n\nconst signalerState = {\n    'channels': {}\n  }\n  , channelObserver = require('./channels')(signalerState);\n\nmodule.exports = comunicator => {\n\n  if (!comunicator) {\n\n    throw new Error('Comunicator object missing');\n  }\n\n  channelObserver.forEach(element => {\n\n    console.info(element);\n  });\n\n  comunicator\n    .filter(element => element.type === 'message-arrived')\n    .forEach(element => {\n\n      // { 'whoami': parsedMsg.data.whoami, 'who': parsedMsg.data.who, 'what': parsedMsg.data.what }\n      if (element &&\n        element.whoami &&\n        element.who &&\n        element.what &&\n        element.what.type) {\n\n        const messageBody = element.what\n          , messageType = messageBody.type;\n        let theChannel\n          , theUser;\n\n        switch (messageType) {\n\n          case 'create-channel': {\n\n            if (messageBody.channel) {\n\n              theChannel = messageBody.channel;\n              theUser = element.whoami;\n              if (!signalerState.channels[theChannel]) {\n\n                signalerState.channels[theChannel] = [];\n              }\n\n              signalerState.channels[theChannel].push({\n                'user': theUser,\n                'role': 'master',\n                'channel': theChannel\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> value');\n            }\n            break;\n          }\n\n          case 'join-channel': {\n\n            if (messageBody.channel) {\n\n              theChannel = messageBody.channel;\n              theUser = element.whoami;\n              if (!signalerState.channels[theChannel]) {\n\n                signalerState.channels[theChannel] = [];\n              }\n\n              signalerState.channels[theChannel].push({\n                'user': theUser,\n                'role': 'slave',\n                'channel': theChannel\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> value');\n            }\n            break;\n          }\n\n          case 'offer': {\n\n            if (messageBody.channel &&\n              messageBody.offer) {\n\n              comunicator.sendTo(element.whoami, element.who, {\n                'type': 'take-offer',\n                'channel': messageBody.channel,\n                'offer': messageBody.offer\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> and <offer> values');\n            }\n            break;\n          }\n\n          case 'answer': {\n\n            if (messageBody.channel &&\n              messageBody.answer) {\n\n              comunicator.sendTo(element.whoami, element.who, {\n                'type': 'take-answer',\n                'channel': messageBody.channel,\n                'answer': messageBody.answer\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> and <answer> values');\n            }\n            break;\n          }\n\n          case 'use-ice-candidates': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who) {\n\n                comunicator.sendTo(element.whoami, element.who, {\n                  'type': 'take-candidates',\n                  'channel': messageBody.channel,\n                  'candidates': messageBody.candidates\n                });\n              }\n            });\n            break;\n          }\n\n          case 'approve': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who &&\n                !anElement.approved) {\n\n                anElement.approved = true;\n              } else if (anElement.role !== 'master') {\n\n                comunicator.sendTo(element.who, anElement.user, {\n                  'type': 'approved',\n                  'channel': anElement.channel\n                });\n              }\n            });\n            break;\n          }\n\n          case 'un-approve': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who &&\n                anElement.approved) {\n                const usersInChannelExceptApproved = theChannel.filter(anElementToFilter => {\n\n                  if (anElementToFilter.user !== element.who &&\n                    anElementToFilter.role !== 'master') {\n\n                    return true;\n                  }\n                }).map(anElementToMap => {\n\n                  return anElementToMap.user;\n                });\n\n                delete anElement.approved;\n                comunicator.sendTo(element.whoami, element.who, {\n                  'type': 'you-are-un-approved',\n                  'channel': anElement.channel,\n                  'users': usersInChannelExceptApproved\n                });\n              } else if (anElement.role === 'slave') {\n\n                comunicator.sendTo(element.who, anElement.user, {\n                  'type': 'un-approved',\n                  'channel': anElement.channel\n                });\n              }\n            });\n            break;\n          }\n\n          case 'leave-channel': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            for (let theChannelIndex = theChannel.length - 1; theChannelIndex >= 0; theChannelIndex -= 1) {\n\n              theUser = theChannel[theChannelIndex];\n              if (theUser &&\n                theUser.user === element.whoami) {\n\n                signalerState.channels[messageBody.channel].splice(theChannelIndex, 1);\n              }\n            }\n            break;\n          }\n\n          default: {\n\n            throw new Error(`Message arrived un-manageable ${JSON.stringify(element)}`);\n          }\n        }\n      } else {\n\n        throw new Error(`Problem during message delivery for ${JSON.stringify(element)}`);\n      }\n    });\n  comunicator\n    .filter(element => element.type === 'user-leave')\n    .forEach(element => {\n\n      console.info(element, signalerState.channels);//TODO: fix this!\n      /*for (const aChannel of signalerState.channels) {\n\n        if (aChannel &&\n          aChannel[0] &&\n          aChannel[1]) {\n          const aChannelName = aChannel[0]\n            , usersInChannel = aChannel[1]\n            , usersInChannelLength = usersInChannel.length;\n\n          for (let usersInChannelIndex = usersInChannelLength - 1; usersInChannelIndex >= 0; usersInChannelIndex -= 1) {\n            let aUserInChannel = usersInChannel[usersInChannelIndex];\n\n            if (aUserInChannel &&\n              aUserInChannel.user === element.whoami) {\n\n              usersInChannel.splice(usersInChannelIndex, 1);\n            }\n          }\n        }\n      }*/\n    });\n};\n\n/*\n\nvar onChannelChange = function onChannelChange(changes) {\n\n  if (changes) {\n\n    changes.forEach(function iterator(aChange) {\n\n      if (aChange &&\n        aChange.type &&\n        aChange.object) {\n\n        switch (aChange.type) {\n\n          //{ type: 'splice', object: [ [Object], [Object] ], index: 1, removed: [], addedCount: 1 }\n          case 'splice': {\n            var theElement\n            , usersInChannelIndex = 0\n            , usersInChannelLength = aChange.object.length\n            , aUserInChannel;\n\n            if (aChange.addedCount > 0) {\n\n              theElement = aChange.object[aChange.index];\n              if (theElement.role === 'master') {\n\n                for (; usersInChannelIndex < usersInChannelLength; usersInChannelIndex += 1) {\n\n                  aUserInChannel = aChange.object[usersInChannelIndex];\n                  if (aUserInChannel &&\n                    aUserInChannel.role === 'slave') {\n\n                    comunicator.sendTo(aUserInChannel.user, theElement.user, {\n                      'type': 'do-handshake',\n                      'channel': aUserInChannel.channel\n                    });\n                  }\n                }\n              } else if (theElement.role === 'slave') {\n\n                for (; usersInChannelIndex < usersInChannelLength; usersInChannelIndex += 1) {\n\n                  aUserInChannel = aChange.object[usersInChannelIndex];\n                  if (aUserInChannel &&\n                    aUserInChannel.role === 'master') {\n\n                    comunicator.sendTo(theElement.user, aUserInChannel.user, {\n                      'type': 'do-handshake',\n                      'channel': aUserInChannel.channel\n                    });\n                    break;\n                  }\n                }\n              }\n            } else { //initiator is gone\n\n              theElement = aChange.removed[0];\n              if (theElement.role === 'master') {\n\n                for (; usersInChannelIndex < usersInChannelLength; usersInChannelIndex += 1) {\n\n                  aUserInChannel = aChange.object[usersInChannelIndex];\n                  if (aUserInChannel &&\n                    aUserInChannel.role === 'slave') {\n\n                    comunicator.sendTo(theElement.user, aUserInChannel.user, {\n                      'type': 'initiator-quit',\n                      'channel': aUserInChannel.channel\n                    });\n                  }\n                }\n              } else if (theElement.role === 'slave') {\n\n                for (; usersInChannelIndex < usersInChannelLength; usersInChannelIndex += 1) {\n\n                  aUserInChannel = aChange.object[usersInChannelIndex];\n                  if (aUserInChannel) {\n\n                    comunicator.sendTo(theElement.user, aUserInChannel.user, {\n                      'type': 'slave-quit',\n                      'channel': aUserInChannel.channel\n                    });\n                  }\n                }\n              }\n            }\n            break;\n          }\n\n          //{ type: 'update', object: [ 33, 2, 3 ], name: '0', oldValue: 1 }\n          case 'update': {\n\n            console.log(aChange);\n            break;\n          }\n\n          default: {\n\n            throw 'Un-managed observable type ' + JSON.stringify(aChange);\n          }\n        }\n      } else {\n\n        throw 'Observable object structure is changed ' + JSON.stringify(aChange);\n      }\n    });\n  } else {\n\n    throw 'No changes but observe is launched';\n  }\n}\n, onChannelsChange = function onChannelsChange(changes) {\n\n  if (changes) {\n\n    changes.forEach(function iterator(aChange) {\n\n      if (aChange &&\n        aChange.type &&\n        aChange.object &&\n        aChange.name) {\n\n        switch (aChange.type) {\n\n          case 'add': {\n\n            Array.observe(aChange.object[aChange.name], onChannelChange);\n            break;\n          }\n\n          case 'update': {\n\n            if (aChange.oldValue) {\n\n              Array.unobserve(aChange.oldValue[aChange.name], onChannelChange);\n            }\n\n            Array.observe(aChange.object[aChange.name], onChannelChange);\n            break;\n          }\n\n          case 'delete': {\n\n            if (aChange.oldValue) {\n\n              Array.unobserve(aChange.oldValue[aChange.name], onChannelChange);\n            }\n            break;\n          }\n          default: {\n\n            throw 'Un-managed observable type ' + JSON.stringify(aChange);\n          }\n        }\n      } else {\n\n        throw 'Observable object structure is changed ' + JSON.stringify(aChange);\n      }\n    });\n  } else {\n\n    throw 'No changes but observe is launched';\n  }\n};\n\nObject.observe(channels, onChannelsChange);\n*/\n"],"sourceRoot":"/source/"}