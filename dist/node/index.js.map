{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*global module,process,require*/\n\nconst ObservableState = require('./observable-state');\n\nmodule.exports = comunicator => {\n\n  if (!comunicator) {\n\n    throw new Error('Comunicator object missing');\n  }\n  const signalerState = new ObservableState();\n\n  signalerState\n    .filter(element => element.type === 'added')\n    .map(element => element.value)\n    .filter(element => element.role === 'master')\n    .forEach(element => {\n      if (element.channel &&\n        element.user) {\n\n        const channel = signalerState.getChannelInState(element.channel)\n          , channelElements = Object.keys(channel);\n\n        channelElements\n          .forEach(userIdentification => {\n            const userInChannelDescription = channel[userIdentification];\n\n            if (userInChannelDescription.role === 'slave') {\n\n              comunicator.sendTo(userInChannelDescription.user, element.user, {\n                'type': 'do-handshake',\n                'channel': userInChannelDescription.channel\n              });\n            }\n          });\n      } else {\n\n        process.nextTick(() => {\n\n          throw new Error('Missing mandatory fields channel and user');\n        });\n      }\n    });\n\n  signalerState\n    .filter(element => element.type === 'added')\n    .map(element => element.value)\n    .filter(element => element.role === 'slave')\n    .forEach(element => {\n      if (element.channel &&\n        element.user) {\n\n        const channel = signalerState.getChannelInState(element.channel)\n          , channelElements = Object.keys(channel);\n\n        channelElements\n          .forEach(userIdentification => {\n            const userInChannelDescription = channel[userIdentification];\n\n            if (userInChannelDescription.role === 'master') {\n\n              comunicator.sendTo(element.user, userInChannelDescription.user, {\n                'type': 'do-handshake',\n                'channel': userInChannelDescription.channel\n              });\n            }\n          });\n      } else {\n\n        process.nextTick(() => {\n\n          throw new Error('Missing mandatory fields channel and user');\n        });\n      }\n    });\n\n  signalerState\n    .filter(element => element.type === 'quit')\n    .forEach(element => {\n\n      comunicator.broadcast(element.value, {\n        'type': 'i-quit',\n        'channel': element.channel\n      });\n    });\n\n  signalerState\n    .filter(element => element.type === 'master-quit')\n    .forEach(element => {\n\n      comunicator.broadcast(element.value, {\n        'type': 'master-quits',\n        'channel': element.channel\n      });\n    });\n\n  comunicator\n    .filter(element => element.type === 'message-arrived' &&\n      element.what &&\n      element.what.type === 'create-channel')\n    .map(element => ({\n      'channel': element.what.channel,\n      'whoami': element.whoami\n    }))\n    .forEach(element => {\n      if (element.channel) {\n        const theChannel = element.channel\n          , theUser = element.whoami;\n\n        if (!signalerState.containsInState(theChannel)) {\n\n          signalerState.addChannelInState(theChannel);\n        } else if (signalerState.getChannelInState(theChannel).master &&\n          signalerState.getChannelInState(theChannel).master.user !== theUser) {\n\n          process.nextTick(() => {\n\n            throw new Error('There is already a master user for this channel');\n          });\n        }\n\n        signalerState.getChannelInState(theChannel).master = {\n          'user': theUser,\n          'role': 'master',\n          'channel': theChannel\n        };\n      } else {\n\n        throw new Error('Missing mandatory <channel> value');\n      }\n    });\n\n  comunicator\n    .filter(element => element.type === 'message-arrived' &&\n      element.what &&\n      element.what.type === 'join-channel')\n    .map(element => ({\n      'channel': element.what.channel,\n      'whoami': element.whoami\n    }))\n    .forEach(element => {\n      if (element.channel) {\n        const theChannel = element.channel\n          , theUser = element.whoami;\n\n        if (!signalerState.containsInState(theChannel)) {\n\n          signalerState.addChannelInState(theChannel);\n        } else if (signalerState.getChannelInState(theChannel).master &&\n          signalerState.getChannelInState(theChannel).master.user === theUser) {\n\n          process.nextTick(() => {\n\n            throw new Error(`The user ${theUser} can be either master or slave`);\n          });\n        }\n\n        signalerState.getChannelInState(theChannel)[theUser] = {\n          'user': theUser,\n          'role': 'slave',\n          'channel': theChannel\n        };\n      } else {\n\n        throw new Error('Missing mandatory <channel> value');\n      }\n    });\n\n  comunicator\n    .filter(element => element.type === 'message-arrived' &&\n      element.what &&\n      element.what.type === 'leave-channel')\n    .forEach(element => {\n      const theChannel = signalerState.getChannelInState(element.what.channel)\n        , theChannelKeys = Object.keys(theChannel)\n        , theChannelKeysLength = theChannelKeys.length;\n\n      for (let theChannelKeysIndex = 0; theChannelKeysIndex < theChannelKeysLength; theChannelKeysIndex += 1) {\n        const aChannelUser = theChannelKeys[theChannelKeysIndex];\n\n        if (theChannel[aChannelUser] &&\n          theChannel[aChannelUser].user === element.whoami) {\n\n          delete theChannel[aChannelUser];\n        }\n      }\n    });\n\n  comunicator\n    .filter(element => element.type === 'user-leave')\n    .forEach(element => {\n\n      console.info(element, signalerState);//TODO: fix this!\n      /*for (const aChannel of signalerState.channels) {\n\n        if (aChannel &&\n          aChannel[0] &&\n          aChannel[1]) {\n          const aChannelName = aChannel[0]\n            , usersInChannel = aChannel[1]\n            , usersInChannelLength = usersInChannel.length;\n\n          for (let usersInChannelIndex = usersInChannelLength - 1; usersInChannelIndex >= 0; usersInChannelIndex -= 1) {\n            let aUserInChannel = usersInChannel[usersInChannelIndex];\n\n            if (aUserInChannel &&\n              aUserInChannel.user === element.whoami) {\n\n              usersInChannel.splice(usersInChannelIndex, 1);\n            }\n          }\n        }\n      }*/\n    });\n\n  /*comunicator\n    .filter(element => element.type === 'message-arrived' &&\n      element.what &&\n      element.what.type === 'approve')\n    .forEach(element => {\n      const theChannel = signalerState.channels[element.channel];\n\n      theChannel.forEach(anElement => {\n\n        if (anElement &&\n          anElement.user === element.who &&\n          !anElement.approved) {\n\n          anElement.approved = true;\n        } else if (anElement.role !== 'master') {\n\n          comunicator.sendTo(element.who, anElement.user, {\n            'type': 'approved',\n            'channel': anElement.channel\n          });\n        }\n      });\n    });\n\n  comunicator\n    .filter(element => element.type === 'message-arrived' &&\n      element.what &&\n      element.what.type === 'un-approve')\n    .forEach(element => {\n      const theChannel = signalerState.channels[element.channel];\n\n      theChannel.forEach(anElement => {\n\n        if (anElement &&\n          anElement.user === element.who &&\n          anElement.approved) {\n          const usersInChannelExceptApproved = theChannel.filter(anElementToFilter => {\n\n            if (anElementToFilter.user !== element.who &&\n              anElementToFilter.role !== 'master') {\n\n              return true;\n            }\n          }).map(anElementToMap => {\n\n            return anElementToMap.user;\n          });\n\n          delete anElement.approved;\n          comunicator.sendTo(element.whoami, element.who, {\n            'type': 'you-are-un-approved',\n            'channel': anElement.channel,\n            'users': usersInChannelExceptApproved\n          });\n        } else if (anElement.role === 'slave') {\n\n          comunicator.sendTo(element.who, anElement.user, {\n            'type': 'un-approved',\n            'channel': anElement.channel\n          });\n        }\n      });\n    });*/\n};\n"],"sourceRoot":"/source/"}