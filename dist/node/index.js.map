{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*global module,process,require*/\n\nconst ObservableState = require('./observable-state');\n\nmodule.exports = comunicator => {\n\n  if (!comunicator) {\n\n    throw new Error('Comunicator object missing');\n  }\n  const signalerState = new ObservableState();\n\n  signalerState.forEach(console.info);\n\n  comunicator\n    .filter(element => element.type === 'message-arrived')\n    .forEach(element => {\n\n      // { 'whoami': parsedMsg.data.whoami, 'who': parsedMsg.data.who, 'what': parsedMsg.data.what }\n      if (element &&\n        element.whoami &&\n        element.who &&\n        element.what &&\n        element.what.type) {\n        const messageBody = element.what\n          , messageType = messageBody.type;\n\n        switch (messageType) {\n\n          case 'create-channel': {\n\n            if (messageBody.channel) {\n              const theChannel = messageBody.channel\n                , theUser = element.whoami;\n\n              if (!signalerState.containsInState(theChannel)) {\n\n                signalerState.addChannelInState(theChannel);\n              } else if (signalerState.getChannelInState(theChannel).master &&\n                signalerState.getChannelInState(theChannel).master.user !== theUser) {\n\n                process.nextTick(() => {\n\n                  throw new Error('There is already a master user for this channel');\n                });\n              }\n\n              signalerState.getChannelInState(theChannel).master = {\n                'user': theUser,\n                'role': 'master',\n                'channel': theChannel\n              };\n            } else {\n\n              throw new Error('Missing mandatory <channel> value');\n            }\n            break;\n          }\n\n          case 'join-channel': {\n\n            if (messageBody.channel) {\n              const theChannel = messageBody.channel\n                , theUser = element.whoami;\n\n              if (!signalerState.containsInState[theChannel]) {\n\n                signalerState.addChannelInState[theChannel] = [];\n              } else if (signalerState.getChannelInState(theChannel).master &&\n                signalerState.getChannelInState(theChannel).master.user === theUser) {\n\n                process.nextTick(() => {\n\n                  throw new Error(`The user ${theUser} can be either master or slave`);\n                });\n              }\n\n              signalerState.getChannelInState(theChannel)[theUser] = {\n                'user': theUser,\n                'role': 'slave',\n                'channel': theChannel\n              };\n            } else {\n\n              throw new Error('Missing mandatory <channel> value');\n            }\n            break;\n          }\n\n          case 'offer': {\n\n            if (messageBody.channel &&\n              messageBody.offer) {\n\n              comunicator.sendTo(element.whoami, element.who, {\n                'type': 'take-offer',\n                'channel': messageBody.channel,\n                'offer': messageBody.offer\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> and <offer> values');\n            }\n            break;\n          }\n\n          case 'answer': {\n\n            if (messageBody.channel &&\n              messageBody.answer) {\n\n              comunicator.sendTo(element.whoami, element.who, {\n                'type': 'take-answer',\n                'channel': messageBody.channel,\n                'answer': messageBody.answer\n              });\n            } else {\n\n              throw new Error('Missing mandatory <channel> and <answer> values');\n            }\n            break;\n          }\n\n          case 'use-ice-candidates': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who) {\n\n                comunicator.sendTo(element.whoami, element.who, {\n                  'type': 'take-candidates',\n                  'channel': messageBody.channel,\n                  'candidates': messageBody.candidates\n                });\n              }\n            });\n            break;\n          }\n\n          case 'approve': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who &&\n                !anElement.approved) {\n\n                anElement.approved = true;\n              } else if (anElement.role !== 'master') {\n\n                comunicator.sendTo(element.who, anElement.user, {\n                  'type': 'approved',\n                  'channel': anElement.channel\n                });\n              }\n            });\n            break;\n          }\n\n          case 'un-approve': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            theChannel.forEach(anElement => {\n\n              if (anElement &&\n                anElement.user === element.who &&\n                anElement.approved) {\n                const usersInChannelExceptApproved = theChannel.filter(anElementToFilter => {\n\n                  if (anElementToFilter.user !== element.who &&\n                    anElementToFilter.role !== 'master') {\n\n                    return true;\n                  }\n                }).map(anElementToMap => {\n\n                  return anElementToMap.user;\n                });\n\n                delete anElement.approved;\n                comunicator.sendTo(element.whoami, element.who, {\n                  'type': 'you-are-un-approved',\n                  'channel': anElement.channel,\n                  'users': usersInChannelExceptApproved\n                });\n              } else if (anElement.role === 'slave') {\n\n                comunicator.sendTo(element.who, anElement.user, {\n                  'type': 'un-approved',\n                  'channel': anElement.channel\n                });\n              }\n            });\n            break;\n          }\n\n          case 'leave-channel': {\n\n            theChannel = signalerState.channels[messageBody.channel];\n            for (let theChannelIndex = theChannel.length - 1; theChannelIndex >= 0; theChannelIndex -= 1) {\n\n              theUser = theChannel[theChannelIndex];\n              if (theUser &&\n                theUser.user === element.whoami) {\n\n                signalerState.channels[messageBody.channel].splice(theChannelIndex, 1);\n              }\n            }\n            break;\n          }\n\n          default: {\n\n            throw new Error(`Message arrived un-manageable ${JSON.stringify(element)}`);\n          }\n        }\n      } else {\n\n        throw new Error(`Problem during message delivery for ${JSON.stringify(element)}`);\n      }\n    });\n  comunicator\n    .filter(element => element.type === 'user-leave')\n    .forEach(element => {\n\n      console.info(element, signalerState.channels);//TODO: fix this!\n      /*for (const aChannel of signalerState.channels) {\n\n        if (aChannel &&\n          aChannel[0] &&\n          aChannel[1]) {\n          const aChannelName = aChannel[0]\n            , usersInChannel = aChannel[1]\n            , usersInChannelLength = usersInChannel.length;\n\n          for (let usersInChannelIndex = usersInChannelLength - 1; usersInChannelIndex >= 0; usersInChannelIndex -= 1) {\n            let aUserInChannel = usersInChannel[usersInChannelIndex];\n\n            if (aUserInChannel &&\n              aUserInChannel.user === element.whoami) {\n\n              usersInChannel.splice(usersInChannelIndex, 1);\n            }\n          }\n        }\n      }*/\n    });\n};\n"],"sourceRoot":"/source/"}