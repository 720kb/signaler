{"version":3,"sources":["observable-state.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAM,UAAU,QAAQ,iBAAR,C;AAAhB;IACI,KAAK,QAAQ,SAAR,CADT;IAEI,aAAa,OAAO,SAAP,CAFjB;IAGI,gBAAgB,IAAI,GAAJ,EAHpB;;IAKM,e;;;AACJ,6BAAc;AAAA;;AAAA;;AAEZ,QAAM,qBAAqB,IAAI,GAAG,UAAP,CAAkB,sBAAc;;AAEzD,YAAK,UAAL,IAAmB;AACjB,eAAO,aAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA6B;;AAElC,iBAAO,QAAP,IAAmB,KAAnB;AACA,qBAAW,IAAX,CAAgB;AACd,oBAAQ,OADM;AAEd;AAFc,WAAhB;AAIA,iBAAO,IAAP;AACD,SATgB;AAUjB,0BAAkB,wBAAC,MAAD,EAAS,QAAT,EAAsB;AACtC,cAAM,OAAO,OAAO,QAAP,EAAiB,IAA9B;cACI,UAAU,OAAO,QAAP,EAAiB,OAD/B;cAEI,OAAO,OAAO,QAAP,EAAiB,IAF5B;;AAIA,iBAAO,OAAO,QAAP,CAAP;;AAEA,cAAI,SAAS,QAAb,EAAuB;;AAErB,uBAAW,IAAX,CAAgB;AACd,sBAAQ,aADM;AAEd,8BAFc;AAGd,uBAAS;AAHK,aAAhB;AAKD,WAPD,MAOO;;AAEL,uBAAW,IAAX,CAAgB;AACd,sBAAQ,MADM;AAEd,8BAFc;AAGd,uBAAS;AAHK,aAAhB;AAKD;AACD,iBAAO,IAAP;AACD;AAjCgB,OAAnB;AAmCD,KArC0B,EAqCxB,KArCwB,EAA3B;;AAFY,sGAyCN,oBAAY;;AAEhB,UAAM,mCAAmC,mBACtC,SADsC,CAC5B,QAD4B,CAAzC;;AAGA,aAAO,YAAM;;AAEX,yCAAiC,WAAjC;AACD,OAHD;AAID,KAlDW;AAmDb;;;;sCAEiB,W,EAAa;;AAE7B,oBAAc,GAAd,cAA6B,WAA7B,EAA4C,IAAI,KAAJ,CAAU,EAAV,EAAc,KAAK,UAAL,CAAd,CAA5C;AACD;;;sCAEiB,W,EAAa;;AAE7B,aAAO,cAAc,GAAd,cAA6B,WAA7B,CAAP;AACD;;;oCAEe,W,EAAa;;AAE3B,aAAO,cAAc,GAAd,cAA6B,WAA7B,CAAP;AACD;;;wBAEW;;AAEV,aAAO,aAAP;AACD;;;;EAxE2B,GAAG,U;;AA2EjC,OAAO,OAAP,GAAiB,eAAjB","file":"observable-state.js","sourcesContent":["/*global module,require*/\n\nconst Reflect = require('harmony-reflect') //TODO remove this when V8 49 land in node\n  , Rx = require('rxjs/Rx')\n  , handlerSym = Symbol('handler')\n  , signalerState = new Map();\n\nclass ObservableState extends Rx.Observable {\n  constructor() {\n\n    const internalObservable = new Rx.Observable(subscriber => {\n\n      this[handlerSym] = {\n        'set': (target, property, value) => {\n\n          target[property] = value;\n          subscriber.next({\n            'type': 'added',\n            value\n          });\n          return true;\n        },\n        'deleteProperty': (target, property) => {\n          const user = target[property].user\n            , channel = target[property].channel\n            , role = target[property].role;\n\n          delete target[property];\n\n          if (role === 'master') {\n\n            subscriber.next({\n              'type': 'master-quit',\n              channel,\n              'value': user\n            });\n          } else {\n\n            subscriber.next({\n              'type': 'quit',\n              channel,\n              'value': user\n            });\n          }\n          return true;\n        }\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n  }\n\n  addChannelInState(channelName) {\n\n    signalerState.set(`channel-${channelName}`, new Proxy({}, this[handlerSym]));\n  }\n\n  getChannelInState(channelName) {\n\n    return signalerState.get(`channel-${channelName}`);\n  }\n\n  containsInState(channelName) {\n\n    return signalerState.has(`channel-${channelName}`);\n  }\n\n  get state() {\n\n    return signalerState;\n  }\n}\n\nmodule.exports = ObservableState;\n"],"sourceRoot":"/source/"}