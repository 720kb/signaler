{"version":3,"file":"signaler-min.js","sources":["../../lib/frontend/p2p.js","../../lib/frontend/signaler.js"],"sourcesContent":["/*global RTCPeerConnection,RTCSessionDescription*/\nimport Rx from 'rxjs/Rx';\n\nconst rtcConfiguration = {\n    'iceServers': [\n      {\n        'urls': 'stun:stun.l.google.com:19302'\n      },\n      {\n        'urls': 'stun:23.21.150.121'\n      }\n    ]\n  }\n  , rtcOptions = {}\n  , rtcDataChannelOptions = {}\n  , iceCandidates = []\n  , peerConnectionSym = Symbol('peer-connection')\n  , dataChannelSym = Symbol('data-channel');\n\nclass SignalerPeerConnection extends Rx.Observable {\n\n  constructor(sdpConstr) {\n\n    if (!sdpConstr) {\n\n      throw new Error('Manadatory spd constraints missing.');\n    }\n\n    const internalObservable = new Rx.Observable(subscriber => {\n      const dataChannelError = error => {\n\n        subscriber.error({\n          'type': 'error',\n          'cause': error\n        });\n      }\n      , dataChannelMessage = event => {\n\n        if (event &&\n          event.data) {\n\n          if ((typeof event.data === 'string' || String.prototype.isPrototypeOf(event.data)) &&\n            event.data.indexOf('_signaler') >= 0) {\n\n            switch (event.data) {\n              case '_signaler:got-stream?': {\n\n                subscriber.next({\n                  'type': 'add-stream'\n                });\n                break;\n              }\n              default: {\n\n                subscriber.error({\n                  'type': 'warn',\n                  'cause': 'Not interesting event atm'\n                });\n              }\n            }\n          } else {\n\n            subscriber.next({\n              'type': 'datachannel-message',\n              'payload': event.data\n            });\n          }\n        } else {\n\n          subscriber.error({\n            'type': 'error',\n            'cause': 'Event data not present'\n          });\n        }\n      }\n      , dataChannelOpen = () => {\n\n        subscriber.next({\n          'type': 'datachannel-opened'\n        });\n      }\n      , dataChannelClose = () => {\n\n        subscriber.next({\n          'type': 'datachannel-closed'\n        });\n      };\n\n      this[peerConnectionSym] = new RTCPeerConnection(rtcConfiguration, rtcOptions);\n      this[dataChannelSym] = this[peerConnectionSym].createDataChannel('signaler-datachannel', rtcDataChannelOptions);\n\n      this[dataChannelSym].onerror = dataChannelError;\n      this[dataChannelSym].onmessage = dataChannelMessage;\n      this[dataChannelSym].onopen = dataChannelOpen;\n      this[dataChannelSym].onclose = dataChannelClose;\n\n      this[peerConnectionSym].onicecandidate = event => {\n\n        if (event.candidate) {\n\n          iceCandidates.push(event.candidate);\n        } else if (iceCandidates &&\n          iceCandidates.length >= 0) {\n\n          subscriber.next({\n            'type': 'use-ice-candidates',\n            'candidates': iceCandidates.splice(0, iceCandidates.length)\n          });\n        }\n      };\n\n      this[peerConnectionSym].onaddstream = event => {\n\n        if (!event ||\n          !event.stream) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'No stream arrived'\n          });\n        }\n\n        subscriber.next({\n          'type': 'add-stream',\n          'stream': event.stream\n        });\n      };\n\n      this[peerConnectionSym].onremovestream = event => {\n\n        if (!event ||\n          !event.stream) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'No stream arrived'\n          });\n        }\n\n        subscriber.next({\n          'type': 'remove-stream',\n          'stream': event.stream\n        });\n      };\n\n      this[peerConnectionSym].onnegotiationneeded = () => {\n\n        this[peerConnectionSym].createOffer()\n          .then(offer => {\n\n            this[peerConnectionSym].setLocalDescription(new RTCSessionDescription(offer));\n            return offer;\n          }, error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          })\n          .then(offer => {\n\n            subscriber.next({\n              'type': 'offer',\n              offer\n            });\n          })\n          .catch(error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          });\n      };\n\n      this[peerConnectionSym].oniceconnectionstatechange = event => {\n\n        if (!event ||\n          !event.target ||\n          !event.target.iceConnectionState) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'ice connection state changed without event value'\n          });\n        }\n\n        switch (event.target.iceConnectionState) {\n\n          case 'connected':\n          case 'completed': {\n\n            subscriber.next({\n              'type': 'ready'\n            });\n            break;\n          }\n\n          default: {\n\n            subscriber.next({\n              'type': 'ice-connection-state',\n              'state': event.target.iceConnectionState\n            });\n          }\n        }\n      };\n\n      this[peerConnectionSym].onsignalingstatechange = event => {\n\n        if (!event ||\n          !event.target ||\n          !event.target.signalingState) {\n\n          return subscriber.error({\n            'type': 'error',\n            'cause': 'signaling state changed without event value'\n          });\n        }\n\n        switch (event.target.signalingState) {\n\n          default: {\n\n            subscriber.next({\n              'type': 'signaling-state',\n              'state': event.target.signalingState\n            });\n          }\n        }\n      };\n\n      this[peerConnectionSym].ondatachannel = event => {\n\n        if (!event ||\n          !event.channel) {\n\n          return subscriber.error({\n            'type': 'error',\n            'cause': 'channel in event is not present'\n          });\n        }\n\n        event.channel.onerror = dataChannelError;\n        event.channel.onmessage = dataChannelMessage;\n        event.channel.onopen = dataChannelOpen;\n        event.channel.onclose = dataChannelClose;\n      };\n\n      this.setRemoteDescription = payload => {\n\n        this[peerConnectionSym].setRemoteDescription(new RTCSessionDescription(payload))\n          .then(() => {\n\n            return this[peerConnectionSym].createAnswer(this.sdpConstr);\n          }, error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          })\n          .then(answer => {\n\n            this[peerConnectionSym].setLocalDescription(new RTCSessionDescription(answer));\n            return answer;\n          }, error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          })\n          .then(answer => {\n\n            subscriber.next({\n              'type': 'answer',\n              answer\n            });\n          })\n          .catch(error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          });\n      };\n\n      return () => {\n\n        this[dataChannelSym].close();\n        this[peerConnectionSym].close();\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    this.sdpConstr = sdpConstr;\n  }\n\n  get dataChannel() {\n\n    if (!this[dataChannelSym]) {\n\n      throw new Error('Datachannel is not created');\n    }\n\n    return this[dataChannelSym];\n  }\n}\n\nexport {SignalerPeerConnection};\n","/*global navigator*/\nimport Rx from 'rxjs/Rx';\nimport {Comunicator} from 'comunicator';\nimport {SignalerPeerConnection} from './p2p.js';\n\nconst comunicatorSym = Symbol('comunicator')\n  , myStreamSym = Symbol('my-stream')\n  , userMediaConstraintsSym = Symbol('user-media-constraint')\n  , sdpConstraintsSym = Symbol('sdp-constraints')\n  , unknownPeerValue = 'unknown-peer'\n  , getUserMediaConstraints = {\n    'audio': true,\n    'video': true\n  }\n  , sdpConstraints = {\n    'mandatory': {\n      'OfferToReceiveAudio': true,\n      'OfferToReceiveVideo': true\n    }\n  };\n\nclass Signaler extends Rx.Observable {\n  constructor(websocketUrl, getUserMediaConstr = getUserMediaConstraints, sdpConstr = sdpConstraints) {\n\n    const internalObservable = new Rx.Observable(subscriber => {\n\n      this.getUserMedia = () => {\n\n        navigator.mediaDevices.getUserMedia(this.userMediaConstraints)\n          .then(localStream => {\n\n            if (!this[myStreamSym]) {\n\n              subscriber.next({\n                'type': 'my-stream',\n                'stream': localStream\n              });\n              this[myStreamSym] = localStream;\n            }\n\n            //TODO try to put the contextified audio\n            //audioContext.createMediaStreamSource(myStream);\n            //, contextifiedLocalStream = audioContext.createMediaStreamDestination();\n          })\n          .catch(error => {\n\n            throw new Error(error);\n          });\n      };\n\n      this[comunicatorSym].forEach(element => {\n\n        console.info(element);\n      });\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    this[comunicatorSym] = new Comunicator(websocketUrl);\n    this[userMediaConstraintsSym] = getUserMediaConstr;\n    this[sdpConstraintsSym] = sdpConstr;\n  }\n\n  createChannel(channel) {\n\n    if (!channel) {\n\n      throw new Error('Missing mandatory <channel> parameter.');\n    }\n\n    this[comunicatorSym].sendTo(unknownPeerValue, {\n      'type': 'create-channel',\n      channel\n    }, true);\n  }\n\n  joinChannel(channel) {\n\n    if (!channel) {\n\n      throw new Error('Missing mandatory <channel> parameter.');\n    }\n\n    this[comunicatorSym].sendTo(unknownPeerValue, {\n      'type': 'join-channel',\n      channel\n    }, true);\n  }\n\n  streamOnChannel() {\n\n  }\n\n  sendTo() {\n\n  }\n\n  broadcast() {\n\n  }\n\n  approve() {\n\n  }\n\n  unApprove() {\n\n  }\n\n  leaveChannel() {\n\n  }\n\n  userIsPresent(whoami, token) {\n\n    return this[comunicatorSym].userIsPresent(whoami, token);\n  }\n\n  get userMediaConstraints() {\n\n    return this[userMediaConstraintsSym];\n  }\n\n  get sdpConstraints() {\n\n    return this[sdpConstraintsSym];\n  }\n\n  get stream() {\n\n    if (!this[myStreamSym]) {\n\n      throw new Error('Stream is not present. You have to ask this to the user');\n    }\n\n    return this[myStreamSym];\n  }\n}\n\nexport {Signaler};\n"],"names":["rtcConfiguration","rtcOptions","rtcDataChannelOptions","iceCandidates","peerConnectionSym","Symbol","dataChannelSym","comunicatorSym","SignalerPeerConnection","sdpConstr","Error","internalObservable","Rx","Observable","dataChannelError","error","dataChannelMessage","event","data","String","prototype","isPrototypeOf","indexOf","next","dataChannelOpen","dataChannelClose","RTCPeerConnection","_this","createDataChannel","onerror","onmessage","onopen","onclose","onicecandidate","candidate","push","length","splice","onaddstream","stream","subscriber","onremovestream","onnegotiationneeded","createOffer","then","setLocalDescription","RTCSessionDescription","offer","oniceconnectionstatechange","target","iceConnectionState","onsignalingstatechange","signalingState","ondatachannel","channel","setRemoteDescription","payload","createAnswer","answer","close","share","subscriptionToInternalObservable","subscribe","observer","unsubscribe","this","myStreamSym","userMediaConstraintsSym","sdpConstraintsSym","unknownPeerValue","getUserMediaConstraints","sdpConstraints","Signaler","websocketUrl","getUserMediaConstr","getUserMedia","mediaDevices","userMediaConstraints","localStream","forEach","info","element","Comunicator","sendTo","whoami","token","userIsPresent"],"mappings":"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"}