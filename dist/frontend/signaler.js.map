{"version":3,"file":"signaler.js","sources":["../../lib/frontend/p2p.js","../../lib/frontend/signaler.js"],"sourcesContent":["/*global RTCPeerConnection,RTCSessionDescription,RTCIceCandidate*/\nimport Rx from 'rxjs/Rx';\n\nconst rtcConfiguration = {\n    'iceServers': [\n      {\n        'urls': 'stun:stun.l.google.com:19302'\n      },\n      {\n        'urls': 'stun:23.21.150.121'\n      }\n    ]\n  }\n  , rtcOptions = {}\n  , rtcDataChannelOptions = {}\n  , iceCandidatesSym = Symbol('ice-candidates')\n  , peerConnectionSym = Symbol('peer-connection')\n  , dataChannelSym = Symbol('data-channel');\n\nclass SignalerPeerConnection extends Rx.Observable {\n\n  constructor(sdpConstr, joiner = false) {\n\n    if (!sdpConstr) {\n\n      throw new Error('Manadatory spd constraints missing.');\n    }\n\n    const internalObservable = new Rx.Observable(subscriber => {\n      const dataChannelError = error => {\n\n        subscriber.error({\n          'type': 'error',\n          'cause': error\n        });\n      }\n      , dataChannelMessage = event => {\n\n        if (event &&\n          event.data) {\n\n          if ((typeof event.data === 'string' || String.prototype.isPrototypeOf(event.data)) &&\n            event.data.indexOf('_signaler') >= 0) {\n\n            switch (event.data) {\n              case '_signaler:got-stream?': {\n\n                subscriber.next({\n                  'type': 'add-stream'\n                });\n                break;\n              }\n              default: {\n\n                subscriber.error({\n                  'type': 'warn',\n                  'cause': 'Not interesting event atm'\n                });\n              }\n            }\n          } else {\n\n            subscriber.next({\n              'type': 'datachannel-message',\n              'payload': JSON.parse(event.data)\n            });\n          }\n        } else {\n\n          subscriber.error({\n            'type': 'error',\n            'cause': 'Event data not present'\n          });\n        }\n      }\n      , dataChannelOpen = () => {\n\n        subscriber.next({\n          'type': 'datachannel-opened'\n        });\n      }\n      , dataChannelClose = () => {\n\n        subscriber.next({\n          'type': 'datachannel-closed'\n        });\n      }\n      , negotiationNeeded = () => {\n\n        this[peerConnectionSym].createOffer()\n          .then(offer => {\n\n            subscriber.next({\n              'type': 'offer',\n              offer\n            });\n            return Promise.all([\n              this[peerConnectionSym].setLocalDescription(new RTCSessionDescription(offer)),\n              Promise.resolve(offer)\n            ]);\n          })\n          .then(resolved => subscriber.next({\n            'type': 'offer-set',\n            'offer': resolved[1]\n          }))\n          .catch(error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          });\n      };\n\n      this[peerConnectionSym] = new RTCPeerConnection(rtcConfiguration, rtcOptions);\n      if (!joiner) {\n\n        this[dataChannelSym] = this[peerConnectionSym].createDataChannel('signaler-datachannel', rtcDataChannelOptions);\n        this[dataChannelSym].onerror = dataChannelError;\n        this[dataChannelSym].onmessage = dataChannelMessage;\n        this[dataChannelSym].onopen = dataChannelOpen;\n        this[dataChannelSym].onclose = dataChannelClose;\n      }\n\n      this[peerConnectionSym].onnegotiationneeded = negotiationNeeded;\n\n      this[peerConnectionSym].onicecandidate = event => {\n\n        if (event.candidate) {\n\n          this[iceCandidatesSym].push(event.candidate);\n        } else if (this[iceCandidatesSym] &&\n          this[iceCandidatesSym].length >= 0) {\n\n          subscriber.next({\n            'type': 'use-ice-candidates',\n            'candidates': this[iceCandidatesSym].splice(0, this[iceCandidatesSym].length)\n          });\n        }\n      };\n\n      this[peerConnectionSym].onaddstream = event => {\n\n        if (!event ||\n          !event.stream) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'No stream arrived'\n          });\n        }\n\n        subscriber.next({\n          'type': 'add-stream',\n          'stream': event.stream\n        });\n      };\n\n      this[peerConnectionSym].onremovestream = event => {\n\n        if (!event ||\n          !event.stream) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'No stream arrived'\n          });\n        }\n\n        subscriber.next({\n          'type': 'remove-stream',\n          'stream': event.stream\n        });\n      };\n\n      this[peerConnectionSym].oniceconnectionstatechange = event => {\n\n        if (!event ||\n          !event.target ||\n          !event.target.iceConnectionState) {\n\n          return subscriber.error({\n            'type': 'warning',\n            'cause': 'ice connection state changed without event value'\n          });\n        }\n\n        switch (event.target.iceConnectionState) {\n\n          case 'connected':\n          case 'completed': {\n\n            subscriber.next({\n              'type': 'ready',\n              'state': event.target.iceConnectionState\n            });\n            break;\n          }\n\n          default: {\n\n            subscriber.next({\n              'type': 'ice-connection-state',\n              'state': event.target.iceConnectionState\n            });\n          }\n        }\n      };\n\n      this[peerConnectionSym].onsignalingstatechange = event => {\n\n        if (!event ||\n          !event.target ||\n          !event.target.signalingState) {\n\n          return subscriber.error({\n            'type': 'error',\n            'cause': 'signaling state changed without event value'\n          });\n        }\n\n        switch (event.target.signalingState) {\n\n          default: {\n\n            subscriber.next({\n              'type': 'signaling-state',\n              'state': event.target.signalingState\n            });\n          }\n        }\n      };\n\n      this[peerConnectionSym].ondatachannel = event => {\n\n        if (!event ||\n          !event.channel) {\n\n          return subscriber.error({\n            'type': 'error',\n            'cause': 'channel in event is not present'\n          });\n        }\n\n        this[dataChannelSym] = event.channel;\n        event.channel.onerror = dataChannelError;\n        event.channel.onmessage = dataChannelMessage;\n        event.channel.onopen = dataChannelOpen;\n        event.channel.onclose = dataChannelClose;\n      };\n\n      this.setAnswer = answer => {\n\n        this[peerConnectionSym].setRemoteDescription(new RTCSessionDescription(answer))\n          .then(() => {\n\n            subscriber.next({\n              'type': 'answer-set',\n              answer\n            });\n          });\n      };\n\n      this.setOffer = offer => {\n\n        this[peerConnectionSym].setRemoteDescription(new RTCSessionDescription(offer))\n          .then(() => {\n\n            subscriber.next({\n              'type': 'offer-set',\n              offer\n            });\n            return this[peerConnectionSym].createAnswer(this.sdpConstr);\n          })\n          .then(answer => {\n\n            subscriber.next({\n              'type': 'answer',\n              answer\n            });\n            return Promise.all([\n              this[peerConnectionSym].setLocalDescription(new RTCSessionDescription(answer)),\n              Promise.resolve(answer)\n            ]);\n          })\n          .then(resolved => subscriber.next({\n            'type': 'answer-set',\n            'answer': resolved[1]\n          }))\n          .catch(error => {\n\n            subscriber.error({\n              'type': 'error',\n              'cause': error\n            });\n          });\n      };\n\n      return () => {\n\n        this[dataChannelSym].close();\n        this[peerConnectionSym].close();\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    this[iceCandidatesSym] = [];\n    this.sdpConstr = sdpConstr;\n  }\n\n  addIceCandidates(candidates) {\n\n    if (candidates) {\n\n      candidates.forEach(element => this[peerConnectionSym].addIceCandidate(new RTCIceCandidate(element)));\n    } else {\n\n      throw new Error('Invalid candidates');\n    }\n  }\n\n  get dataChannel() {\n\n    if (!this[dataChannelSym]) {\n\n      throw new Error('Datachannel is not created');\n    }\n\n    return this[dataChannelSym];\n  }\n}\n\nexport {SignalerPeerConnection};\n","/*global window,navigator*/\nimport Rx from 'rxjs/Rx';\nimport {Comunicator} from 'comunicator';\nimport {SignalerPeerConnection} from './p2p.js';\n\nconst comunicatorSym = Symbol('comunicator')\n  , myStreamSym = Symbol('my-stream')\n  , userMediaConstraintsSym = Symbol('user-media-constraint')\n  , sdpConstraintsSym = Symbol('sdp-constraints')\n  , initiatorsSym = Symbol('initiators')\n  , peersSym = Symbol('peers')\n  , subscriptionsSym = Symbol('subscriptions')\n  , unknownPeerValue = 'unknown-peer'\n  , getUserMediaConstraints = {\n    'audio': true,\n    'video': true\n  }\n  , sdpConstraints = {\n    'mandatory': {\n      'OfferToReceiveAudio': true,\n      'OfferToReceiveVideo': true\n    }\n  };\n\nclass Signaler extends Rx.Observable {\n  constructor(websocketUrl, getUserMediaConstr = getUserMediaConstraints, sdpConstr = sdpConstraints, debug = false) {\n\n    const internalObservable = new Rx.Observable(subscriber => {\n\n      this[comunicatorSym]\n        .filter(element => element.what &&\n          element.what.type === 'do-handshake')\n        .forEach(element => {\n\n          if (element.whoami &&\n            element.what.channel) {\n            const p2pConnection = new SignalerPeerConnection(sdpConstr)\n              , subscriptionsArray = [];\n\n            this[initiatorsSym].set(element.what.channel, element.who);\n            if (debug) {\n\n              subscriptionsArray.push(\n                p2pConnection.subscribe({\n                  'next': debugElement => console.info(debugElement),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n              );\n            }\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'offer')\n                .subscribe({\n                  'next': fromPeerConnection => this[comunicatorSym].sendTo(element.whoami, {\n                    'channel': element.what.channel,\n                    'offer': fromPeerConnection.offer\n                  }),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'use-ice-candidates')\n                .subscribe({\n                  'next': fromPeerConnection => this[comunicatorSym].sendTo(element.whoami, {\n                    'channel': element.what.channel,\n                    'candidates': fromPeerConnection.candidates\n                  }),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'datachannel-message')\n                .subscribe({\n                  'next': fromPeerConnection => subscriber.next(fromPeerConnection),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n\n            if (!this[peersSym].has(`${element.what.channel}`)) {\n\n              this[peersSym].set(`${element.what.channel}`, new Map());\n            }\n            this[peersSym].get(`${element.what.channel}`).set(`${element.who}`, p2pConnection);\n\n            if (this[subscriptionsSym].has(`${element.what.channel}`)) {\n\n              this[subscriptionsSym].set(`${element.what.channel}`, this[subscriptionsSym].get(`${element.what.channel}`).concat(subscriptionsArray));\n            } else {\n\n              this[subscriptionsSym].set(`${element.what.channel}`, subscriptionsArray);\n            }\n          } else {\n\n            window.setTimeout(() => {\n\n              throw new Error('Missing sender and channel that are mandatory');\n            });\n          }\n        });\n\n      this[comunicatorSym]\n        .filter(element => element.what &&\n        element.what.offer)\n        .forEach(element => {\n\n          if (element.whoami &&\n            element.what.channel &&\n            element.what.offer) {\n            let p2pConnection;\n            const subscriptionsArray = [];\n\n            if (!this[peersSym].has(`${element.what.channel}`)) {\n\n              this[peersSym].set(`${element.what.channel}`, new Map());\n            }\n\n            if (this[peersSym].get(`${element.what.channel}`).has(`${element.who}`)) {\n\n              p2pConnection = this[peersSym].get(`${element.what.channel}`).get(`${element.who}`);\n            } else {\n              p2pConnection = new SignalerPeerConnection(sdpConstr, true);\n\n              this[initiatorsSym].set(element.what.channel, element.whoami);\n              this[peersSym].get(`${element.what.channel}`).set(`${element.who}`, p2pConnection);\n            }\n\n            if (debug) {\n\n              subscriptionsArray.push(\n                p2pConnection.subscribe({\n                  'next': debugElement => console.info(debugElement),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n              );\n            }\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'answer')\n                .subscribe({\n                  'next': fromPeerConnection => this[comunicatorSym].sendTo(element.whoami, {\n                    'channel': element.what.channel,\n                    'answer': fromPeerConnection.answer\n                  }),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'use-ice-candidates')\n                .subscribe({\n                  'next': fromPeerConnection => this[comunicatorSym].sendTo(element.whoami, {\n                    'channel': element.what.channel,\n                    'candidates': fromPeerConnection.candidates\n                  }),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n\n            subscriptionsArray.push(\n              p2pConnection\n                .filter(fromPeerConnection => fromPeerConnection.type === 'datachannel-message')\n                .subscribe({\n                  'next': fromPeerConnection => subscriber.next(fromPeerConnection),\n                  'error': err => console.error(err),\n                  'complete': () => console.info('DONE!')\n                })\n            );\n            p2pConnection.setOffer(element.what.offer);\n\n            if (this[subscriptionsSym].has(`${element.what.channel}`)) {\n\n              this[subscriptionsSym].set(`${element.what.channel}`, this[subscriptionsSym].get(`${element.what.channel}`).concat(subscriptionsArray));\n            } else {\n\n              this[subscriptionsSym].set(`${element.what.channel}`, subscriptionsArray);\n            }\n          } else {\n\n            window.setTimeout(() => {\n\n              throw new Error('Missing sender, channel and the offer that are mandatory');\n            });\n          }\n        });\n\n      this[comunicatorSym]\n        .filter(element => element.what &&\n        element.what.answer)\n        .forEach(element => {\n\n          if (element.whoami &&\n            element.what.channel &&\n            element.what.answer) {\n\n            if (this[peersSym].has(`${element.what.channel}`) &&\n              this[peersSym].get(`${element.what.channel}`).has(`${element.who}`)) {\n              const p2pConnection = this[peersSym].get(`${element.what.channel}`).get(`${element.who}`);\n\n              p2pConnection.setAnswer(element.what.answer);\n            } else {\n\n              window.setTimeout(() => {\n\n                throw new Error('The peer connection must be already enstablished');\n              });\n            }\n          } else {\n\n            window.setTimeout(() => {\n\n              throw new Error('Missing sender, channel and the answer that are mandatory');\n            });\n          }\n        });\n\n      this[comunicatorSym]\n        .filter(element => element.what &&\n        element.what.candidates)\n        .forEach(element => {\n\n          if (this[peersSym].has(`${element.what.channel}`) &&\n              this[peersSym].get(`${element.what.channel}`).has(`${element.who}`)) {\n            const p2pConnection = this[peersSym].get(`${element.what.channel}`).get(`${element.who}`);\n\n            p2pConnection.addIceCandidates(element.what.candidates);\n          } else {\n\n            window.setTimeout(() => {\n\n              throw new Error('The peer connection must be already enstablished');\n            });\n          }\n        });\n\n      this[comunicatorSym]\n        .filter(element => element.what &&\n          element.what.type === 'master-quits' &&\n        element.whoami !== this[comunicatorSym].whoAmI)\n        .forEach(element => {\n\n          this.leaveChannel(element.what.channel, true);\n        });\n\n      this.getUserMedia = () => {\n\n        navigator.mediaDevices.getUserMedia(this.userMediaConstraints)\n          .then(localStream => {\n\n            if (!this[myStreamSym]) {\n\n              subscriber.next({\n                'type': 'my-stream',\n                'stream': localStream\n              });\n              this[myStreamSym] = localStream;\n            }\n\n            //TODO try to put the contextified audio\n            //audioContext.createMediaStreamSource(myStream);\n            //, contextifiedLocalStream = audioContext.createMediaStreamDestination();\n          })\n          .catch(error => {\n\n            throw new Error(error);\n          });\n      };\n    }).share();\n\n    super(observer => {\n\n      const subscriptionToInternalObservable = internalObservable\n        .subscribe(observer);\n\n      return () => {\n\n        subscriptionToInternalObservable.unsubscribe();\n      };\n    });\n\n    this[comunicatorSym] = new Comunicator(websocketUrl);\n    this[userMediaConstraintsSym] = getUserMediaConstr;\n    this[sdpConstraintsSym] = sdpConstr;\n    this[peersSym] = new Map();\n    this[initiatorsSym] = new Map();\n    this[subscriptionsSym] = new Map();\n  }\n\n  createChannel(channel) {\n\n    if (!channel) {\n\n      throw new Error('Missing mandatory <channel> parameter.');\n    }\n\n    this[comunicatorSym].sendTo(unknownPeerValue, {\n      'type': 'create-channel',\n      channel\n    }, true);\n  }\n\n  joinChannel(channel) {\n\n    if (!channel) {\n\n      throw new Error('Missing mandatory <channel> parameter.');\n    }\n\n    this[comunicatorSym].sendTo(unknownPeerValue, {\n      'type': 'join-channel',\n      channel\n    }, true);\n  }\n\n  streamOnChannel() {\n\n  }\n\n  sendTo(channel, who, what) {\n\n    if (this[peersSym].has(`${channel}`) &&\n    this[peersSym].get(`${channel}`).has(`${who}`)) {\n      const dataChannel = this[peersSym].get(`${channel}`).get(`${who}`).dataChannel;\n\n      dataChannel.send(JSON.stringify(what));\n    } else {\n\n      throw new Error(`User ${who} for channel ${channel} do not exist`);\n    }\n  }\n\n  broadcast(channel, what) {\n\n    if (this[peersSym].has(`${channel}`)) {\n      const channelMap = this[peersSym].get(`${channel}`)\n        , entriesInChannelMap = channelMap.values();\n\n      for (const aUserInChannel of entriesInChannelMap) {\n        const dataChannel = aUserInChannel.dataChannel;\n\n        dataChannel.send(JSON.stringify(what));\n      }\n    } else {\n\n      throw new Error(`Channel ${channel} doesn't exist`);\n    }\n  }\n\n  approve() {\n\n  }\n\n  unApprove() {\n\n  }\n\n  leaveChannel(channel, keepMyStream) {\n\n    if (this[peersSym].has(`${channel}`)) {\n      const subscriptionsMap = this[subscriptionsSym].get(`${channel}`);\n\n      for (const aSubscription of subscriptionsMap) {\n\n        aSubscription.unsubscribe();\n      }\n\n      if (!keepMyStream &&\n        this[myStreamSym]) {\n\n        this[myStreamSym].stop();\n        this[myStreamSym] = undefined;\n      }\n      this[initiatorsSym].delete(channel);\n      this[peersSym].delete(channel);\n      this[subscriptionsSym].delete(channel);\n      //delete approvedUsers[channel]; TODO approved users\n      this[comunicatorSym].sendTo(unknownPeerValue, {\n        'type': 'leave-channel',\n        channel\n      }, true);\n    } else {\n\n      throw new Error(`Channel ${channel} doesn't exist`);\n    }\n  }\n\n  userIsPresent(whoami, token) {\n\n    return this[comunicatorSym].userIsPresent(whoami, token);\n  }\n\n  get userMediaConstraints() {\n\n    return this[userMediaConstraintsSym];\n  }\n\n  get sdpConstraints() {\n\n    return this[sdpConstraintsSym];\n  }\n\n  get stream() {\n\n    if (!this[myStreamSym]) {\n\n      throw new Error('Stream is not present. You have to ask this to the user');\n    }\n\n    return this[myStreamSym];\n  }\n\n  get peers() {\n\n    return this[peersSym];\n  }\n\n  get initiators() {\n\n    return this[initiatorsSym];\n  }\n}\n\nexport {Signaler};\n"],"names":["Comunicator"],"mappings":"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"}