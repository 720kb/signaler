{"version":3,"file":"angular-signaler-min.js","sources":["../../lib/frontend/angular-signaler.js"],"sourcesContent":["/*global angular,Signaler*/\n(function withAngular(angular, Signaler) {\n  'use strict';\n\n  angular.module('720kb.signaler', [])\n  .provider('Signaler', function providerFunction() {\n\n    var signaler\n      , initSignaler = function initSignaler(urlOrComunicator, getUserMediaConst, sdpConst, debug) {\n\n        signaler = new Signaler(urlOrComunicator, getUserMediaConst, sdpConst, debug);\n      };\n\n    return {\n      'initSignaler': initSignaler,\n      '$get': ['$rootScope', '$window', '$log',\n      function instantiateProvider($rootScope, $window, $log) {\n\n        var onError = function onError(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:error');\n              scope.$emit('signaler:error', event.detail);\n            });\n          }\n        }\n        , onGetUserMediaError = function onGetUserMediaError(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:usermedia-error');\n              scope.$emit('signaler:usermedia-error', event.detail);\n            });\n          }\n        }\n        , onDataArrived = function onDataArrived(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:data-arrived');\n              scope.$emit('signaler:data-arrived', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onDataChannelOpened = function onDataChannelOpened(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:datachannel-opened');\n              scope.$emit('signaler:datachannel-opened', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onDataChannelClosed = function onDataChannelClosed(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:datachannel-closed');\n              scope.$emit('signaler:datachannel-closed', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onSignalerReady = function onSignalerReady(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              $log.debug('signaler:ready');\n              scope.$emit('signaler:ready', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onStreamArrive = function onStreamArrive(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              scope.$emit('signaler:stream', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onStreamEnd = function onStreamEnd(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              scope.$emit('signaler:end', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        }\n        , onMyStream = function onMyStream(event) {\n\n          if (event &&\n            event.detail) {\n\n            $rootScope.$apply(function doApply(scope) {\n\n              scope.$emit('signaler:my-stream', event.detail);\n            });\n          } else {\n\n            $log.error('Missing mandatory event');\n          }\n        };\n\n        $window.addEventListener('signaler:error', onError, false);\n        $window.addEventListener('signaler:usermedia-error', onGetUserMediaError, false);\n        $window.addEventListener('signaler:data-arrived', onDataArrived, false);\n        $window.addEventListener('signaler:datachannel-opened', onDataChannelOpened, false);\n        $window.addEventListener('signaler:datachannel-closed', onDataChannelClosed, false);\n        $window.addEventListener('signaler:ready', onSignalerReady, false);\n        $window.addEventListener('signaler:stream', onStreamArrive, false);\n        $window.addEventListener('signaler:end', onStreamEnd, false);\n        $window.addEventListener('signaler:my-stream', onMyStream, false);\n\n        $rootScope.$on('$destroy', function unregisterEventListener() {\n\n          $window.removeEventListener('signaler:error', onError, false);\n          $window.removeEventListener('signaler:usermedia-error', onGetUserMediaError, false);\n          $window.removeEventListener('signaler:data-arrived', onDataArrived, false);\n          $window.removeEventListener('signaler:datachannel-opened', onDataChannelOpened, false);\n          $window.removeEventListener('signaler:datachannel-closed', onDataChannelClosed, false);\n          $window.removeEventListener('signaler:ready', onSignalerReady, false);\n          $window.removeEventListener('signaler:stream', onStreamArrive, false);\n          $window.removeEventListener('signaler:end', onStreamEnd, false);\n          $window.removeEventListener('signaler:my-stream', onMyStream, false);\n        });\n\n        return signaler;\n      }]\n    };\n  });\n}(angular, Signaler));\n"],"names":["angular","Signaler","module","provider","signaler","initSignaler","urlOrComunicator","getUserMediaConst","sdpConst","debug","$rootScope","$window","$log","onError","event","detail","$apply","scope","$emit","onGetUserMediaError","onDataArrived","error","onDataChannelOpened","onDataChannelClosed","onSignalerReady","onStreamArrive","onStreamEnd","onMyStream","addEventListener","$on","removeEventListener"],"mappings":"8KACC,SAAqBA,EAASC,KAGrBC,OAAO,qBACdC,SAAS,WAAY,cAEhBC,GACAC,EAAe,SAAsBC,EAAkBC,EAAmBC,EAAUC,KAEzE,GAAIR,GAASK,EAAkBC,EAAmBC,EAAUC,wBAIzDJ,QACP,aAAc,UAAW,OAClC,SAA6BK,EAAYC,EAASC,MAE5CC,GAAU,SAAiBC,GAEzBA,GACFA,EAAMC,UAEKC,OAAO,SAAiBC,KAE5BR,MAAM,oBACLS,MAAM,iBAAkBJ,EAAMC,WAIxCI,EAAsB,SAA6BL,GAE/CA,GACFA,EAAMC,UAEKC,OAAO,SAAiBC,KAE5BR,MAAM,8BACLS,MAAM,2BAA4BJ,EAAMC,WAIlDK,EAAgB,SAAuBN,GAEnCA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE5BR,MAAM,2BACLS,MAAM,wBAAyBJ,EAAMC,YAIxCM,MAAM,4BAGbC,EAAsB,SAA6BR,GAE/CA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE5BR,MAAM,iCACLS,MAAM,8BAA+BJ,EAAMC,YAI9CM,MAAM,4BAGbE,EAAsB,SAA6BT,GAE/CA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE5BR,MAAM,iCACLS,MAAM,8BAA+BJ,EAAMC,YAI9CM,MAAM,4BAGbG,EAAkB,SAAyBV,GAEvCA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE5BR,MAAM,oBACLS,MAAM,iBAAkBJ,EAAMC,YAIjCM,MAAM,4BAGbI,EAAiB,SAAwBX,GAErCA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE3BC,MAAM,kBAAmBJ,EAAMC,YAIlCM,MAAM,4BAGbK,EAAc,SAAqBZ,GAE/BA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE3BC,MAAM,eAAgBJ,EAAMC,YAI/BM,MAAM,4BAGbM,EAAa,SAAoBb,GAE7BA,GACFA,EAAMC,SAEKC,OAAO,SAAiBC,KAE3BC,MAAM,qBAAsBJ,EAAMC,YAIrCM,MAAM,qCAIPO,iBAAiB,iBAAkBf,GAAS,KAC5Ce,iBAAiB,2BAA4BT,GAAqB,KAClES,iBAAiB,wBAAyBR,GAAe,KACzDQ,iBAAiB,8BAA+BN,GAAqB,KACrEM,iBAAiB,8BAA+BL,GAAqB,KACrEK,iBAAiB,iBAAkBJ,GAAiB,KACpDI,iBAAiB,kBAAmBH,GAAgB,KACpDG,iBAAiB,eAAgBF,GAAa,KAC9CE,iBAAiB,qBAAsBD,GAAY,KAEhDE,IAAI,WAAY,aAEjBC,oBAAoB,iBAAkBjB,GAAS,KAC/CiB,oBAAoB,2BAA4BX,GAAqB,KACrEW,oBAAoB,wBAAyBV,GAAe,KAC5DU,oBAAoB,8BAA+BR,GAAqB,KACxEQ,oBAAoB,8BAA+BP,GAAqB,KACxEO,oBAAoB,iBAAkBN,GAAiB,KACvDM,oBAAoB,kBAAmBL,GAAgB,KACvDK,oBAAoB,eAAgBJ,GAAa,KACjDI,oBAAoB,qBAAsBH,GAAY,KAGzDvB,QAIbJ,QAASC"}